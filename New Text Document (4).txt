// server.js
// Run “npm install express multer express-rate-limit helmet ws file-type cookie-parser” first

const express             = require('express');
const multer              = require('multer');
const cookieParser        = require('cookie-parser');
const path                = require('path');
const fs                  = require('fs');
const http                = require('http');
const { spawn }           = require('child_process');
const crypto              = require('crypto');
const rateLimit           = require('express-rate-limit');
const helmet              = require('helmet');
const WebSocket           = require('ws');
const { fileTypeFromFile } = require('file-type');

const app    = express();
const server = http.createServer(app);

// ── Trust one proxy hop so X-Forwarded-For is honored ──
app.set('trust proxy', 2);

// ── Helper to get client IP ──
function getClientIp(req) {
  return req.ip;
}

// ── Paths ──
const LOG_ROOT     = '/var/www/IPLOGS';
const GALLERY_ROOT = path.join(__dirname, 'UWURAWRXD', 'Gallery');
const TOS_LOG      = path.join(LOG_ROOT, 'TOS', 'TOSAccepts.log');

// ── Ensure directories & files exist ──
for (const dir of [
  GALLERY_ROOT,
  path.join(LOG_ROOT, 'TOS'),
  path.join(LOG_ROOT, 'ClientIPS'),
  path.join(LOG_ROOT, 'MediaLogs'),
  path.join(LOG_ROOT, 'ReportLogs'),
  path.join(LOG_ROOT, 'Evidence')
]) {
  fs.mkdirSync(dir, { recursive: true });
}
for (const [sub, file] of [
  ['TOS', 'TOSAccepts.log'],
  ['ClientIPS', 'CIPLOG.txt'],
  ['MediaLogs',   'uploads.log'],
  ['ReportLogs',  'RIPLogs.txt']
]) {
  const fp = path.join(LOG_ROOT, sub, file);
  fs.closeSync(fs.openSync(fp, 'a'));
}

// ── Load accepted IPs into memory ──
const acceptedIPs = new Set(
  fs.readFileSync(TOS_LOG, 'utf8')
    .split('\n')
    .map(l => (l.match(/^IP:\s*(\S+)/) || [])[1])
    .filter(Boolean)
);

// ── Global middleware ──
app.use(helmet());
app.use(cookieParser());
app.use((req, res, next) => {
  const ip = getClientIp(req);
  const entry = `IP: ${ip}, Date: ${new Date().toISOString()}\n`;
  fs.appendFileSync(path.join(LOG_ROOT, 'ClientIPS', 'CIPLOG.txt'), entry);
  next();
});
app.use('/api/', rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  standardHeaders: true,
  legacyHeaders: false
}));
app.use(express.json({ limit: '1mb' }));
app.use(express.urlencoded({ extended: true, limit: '1mb' }));

// ── Serve static gallery ──
app.use('/Gallery', express.static(GALLERY_ROOT));
app.use('/api/Gallery', express.static(GALLERY_ROOT));

// ── Health-check ──
app.get('/health', (req, res) => res.sendStatus(200));

// ── TOS acceptance endpoint ──
app.post('/api/tos', (req, res) => {
  const ip  = getClientIp(req);
  const now = new Date().toISOString();
  fs.appendFileSync(
    TOS_LOG,
    `IP: ${ip}, Date: ${now}\n`
  );
  acceptedIPs.add(ip);
  res.cookie('tos_accepted', '1', {
    httpOnly: true,
    sameSite: 'lax',
    secure: process.env.NODE_ENV === 'production'
  });
  res.sendStatus(200);
});

// ── List media files ──
app.get('/api/media', (req, res) => {
  fs.readdir(GALLERY_ROOT, (err, files) => {
    if (err) return res.status(500).json({ error: 'Gallery read error' });
    const exts = ['.jpg', '.jpeg', '.png', '.gif', '.mp4', '.webm', '.mkv'];
    res.json(files.filter(f => exts.includes(path.extname(f).toLowerCase())));
  });
});

// ── Multer setup (expects field name “file”) ──
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, '/tmp')              // ← make sure to call cb here
  },
  filename: (req, file, cb) => {
    const name = crypto.randomUUID() + path.extname(file.originalname).toLowerCase();
    cb(null, name);
  }
});
const upload = multer({
  storage,
  limits: { fileSize: 100 * 1024 * 1024 }
});
// ── Media-upload endpoint ──
app.post('/api/upload', upload.single('file'), async (req, res, next) => {
  try {
    const ip  = getClientIp(req);
    const now = new Date().toISOString();

    if (!req.file) {
      return res.status(400).send('No file in "file" field');
    }
    if (!acceptedIPs.has(ip)) {
      fs.unlinkSync(req.file.path);
      return res.status(403).send('You must accept the TOS first');
    }

    const { path: tmpPath, originalname } = req.file;
    const ext = path.extname(originalname).toLowerCase();
    let ft;
    try {
      ft = await fileTypeFromFile(tmpPath);
    } catch {
      fs.unlinkSync(tmpPath);
      return res.status(400).send('Validation error');
    }

    const allowed = [
      'image/jpeg','image/png','image/gif',
      'video/mp4','video/webm','video/x-matroska'
    ];
    if (!ft || !allowed.includes(ft.mime) || ft.ext !== ext.slice(1)) {
      fs.unlinkSync(tmpPath);
      return res.status(400).send('File type mismatch');
    }

    const finalName = crypto.randomUUID() + ext;
    const finalPath = path.join(GALLERY_ROOT, finalName);
    fs.renameSync(tmpPath, finalPath);
    fs.appendFileSync(
      path.join(LOG_ROOT, 'MediaLogs', 'uploads.log'),
      `IP: ${ip}, File: ${finalName}, Date: ${now}\n`
    );

    res.send('Upload successful — conversion happening in background.');

    // Background: convert MKV→MP4@1080p60
    if (ext === '.mkv') {
      const tmp2 = path.join('/tmp', finalName.replace(/\.mkv$/i, '.mp4.tmp'));
      const out2 = finalPath.replace(/\.mkv$/i, '.mp4');
      const ff   = spawn('nice', [
        '-n','19','ffmpeg','-i', finalPath,
        '-threads','2','-vf','scale=1920:1080,fps=60', tmp2
      ]);
      ff.on('close', code => {
        if (code === 0) {
          fs.renameSync(tmp2, out2);
          fs.unlinkSync(finalPath);
        } else {
          console.error('ffmpeg exited', code);
        }
      });
    }
  } catch (err) {
    next(err);
  }
});

// ── Report endpoint ──
app.post('/api/report', (req, res) => {
  const name = path.basename(req.body.filename || '');
  const src  = path.join(GALLERY_ROOT, name);
  const dst  = path.join(LOG_ROOT, 'Evidence', name);

  fs.access(src, fs.constants.F_OK, err => {
    if (err) return res.status(404).send('File not found');
    fs.rename(src, dst, err => {
      if (err) return res.status(500).send('Move error');
      fs.appendFileSync(
        path.join(LOG_ROOT, 'ReportLogs', 'RIPLogs.txt'),
        `IP: ${getClientIp(req)}, Reported: ${name}, Date: ${new Date().toISOString()}\n`
      );
      res.send('Report OK');
    });
  });
});

// ── WebSocket “refresh” trigger ──
const wss = new WebSocket.Server({ server, path: '/mediaws' });
wss.on('connection', ws => {
  ws.on('message', msg => {
    if (msg.toString() === 'trigger-refresh') {
      wss.clients.forEach(c => {
        if (c.readyState === WebSocket.OPEN) c.send('refresh');
      });
    }
  });
});

// ── Error handling ──
app.use((err, req, res, next) => {
  console.error('Unhandled express error:', err);
  if (!res.headersSent) res.status(500).send('Internal Server Error');
});
process.on('uncaughtException',   err => console.error('Uncaught exception:', err));
process.on('unhandledRejection',  err => console.error('Unhandled rejection:', err));

// ── Start server ──
const PORT = process.env.PORT || 3000;
server.listen(PORT, () =>
  console.log(`Server listening on http://localhost:${PORT}`)
);
